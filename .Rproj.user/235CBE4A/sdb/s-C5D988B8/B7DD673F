{
    "collab_server" : "",
    "contents" : "\n\nmakePonteEncarreraETL <- function( s_path_data, s_path_family, b_save_result=FALSE){\n  library(data.table)\n  \n  dt_data <- fread(s_path_data,na.strings = c(\"\",\"ND\"))\n  dt_fam <- fread(s_path_family,na.strings = c(\"\",\"ND\"))\n\n  \n  v_new_names = c(\"familia_carrera\", \"carrera\", \"institucion\", \"ubicacion\", \"tipo_institucion\" , \"tipo_gestion\", \n                  \"duracion\", \"rango_costo\", \"porc_ingresantes\", \"ingreso_promedio\", \"credito_universitario\", \n                  \"becas_educativas\", \"num_ingresantes\", \"num_postulantes\", \"num_matriculados\")\n  setnames(dt_data, v_new_names)\n  \n  dt_data[ , ingreso_promedio := as.numeric(ingreso_promedio)]\n  \n  dt_data[ is.na(rango_costo ) & tipo_gestion == \"PUBLICA\" , rango_costo :=\"0\"]\n  dt_data[ , costo_min:= as.numeric( gsub(\"-.*$\",\"\" , gsub(\",\",\"\",rango_costo ) ))]\n  dt_data[ , costo_max:= as.numeric( gsub(\"^.*-\",\"\" ,gsub(\",\",\"\",rango_costo )  ) )]\n  dt_data[ , text_detalle := paste0(institucion , '<br>',familia_carrera) ]\n  \n  dt_data <- merge(dt_data, dt_fam, all.x=T, by= \"familia_carrera\")\n  if(b_save_result == T){\n    save(file= \"./data/output/DtData.RData\",  dt_data)\n    message(\"Data saved in ./data/output/DtData.RData\")\n  }\n  \n  return(dt_data)\n  \n}\n\n\nmakeCostIncomeGraph <- function(dt_data, s_cost_type = \"min\", s_color_pal= \"Set1\"){\n  library(data.table)\n  library(RColorBrewer)\n  library(plotly)\n  dt_data <- dt_data[ , .( costo_min,\n                           costo_max, \n                           institucion, \n                           familia_carrera,\n                           tipo_institucion, \n                           tipo_gestion,\n                           ingreso_promedio,\n                           categoria,\n                           text_detalle)]\n  \n  dt_data <- dt_data[ ingreso_promedio > 0  ]\n  \n  if(s_cost_type == \"min\" ){\n    dt_data[ , costo :=  costo_min ]\n    s_x_axis <- \"Costo mínimo\"\n  } else if (s_cost_type == \"max\" ){\n    dt_data[ , costo :=  costo_max ]\n    s_x_axis <- \"Costo máximo\"\n  } else if (s_cost_type == \"mid range\" ){\n    dt_data[ , costo := (costo_min + costo_max)/2 ]\n    s_x_axis <- \"Marca de clase entre costo máximo y mínimo\"\n  } else {\n    stop( \"s_cost_type must be one of the following: 'max', 'min', 'mid range'\")\n  }\n  \n  i_num_categories <- dt_data[, length(unique(categoria))]\n  \n  p_costo_ingreso <- plot_ly(data = dt_data, \n                             x = ~costo, \n                             y = ~ingreso_promedio, \n                             mode = \"markers\", \n                             color = ~factor(categoria),\n                             text = ~text_detalle,\n                             hoverinfo = \"text\",\n                             colors  = brewer.pal(i_num_categories,s_color_pal))\n  p_costo_ingreso <- p_costo_ingreso %>% layout( xaxis = list(  title = s_x_axis, rangemode=\"tozero\"),\n                                                 yaxis = list(  title = \"Ingreso promedio\", rangemode=\"tozero\"),\n                                                 legend= list( bgcolor= \"#F0F0F0\"),\n                                                 hovermode='closest',\n                                                 margin= list(l=90, r=80, t=40, b=50),\n                                                 plot_bgcolor= \"#fdfdfd\",\n                                                 paper_bgcolor  =\"#fdfdfd\" )\n  \n  \n  return(p_costo_ingreso)\n}\n\nmakeInstitutionIncomeGraph <- function(dt_data, v_s_institutions=NULL, s_color_pal= \"Set1\"){\n  library(data.table)\n  library(RColorBrewer)\n  library(plotly)\n  dt_data <- dt_data[ , .( institucion, \n                           familia_carrera,\n                           tipo_institucion, \n                           tipo_gestion,\n                           ingreso_promedio,\n                           categoria,\n                           text_detalle)]\n  \n  dt_data <- dt_data[ institucion %in%  v_s_institutions &\n                      ingreso_promedio > 0  ]\n  \n  i_num_categories <- dt_data[, length(unique(categoria))]\n  p_institu_ingreso <- plot_ly(data = dt_data, \n                             x = institucion, \n                             y = ingreso_promedio, \n                             mode = \"markers\", \n                             color = factor(categoria),\n                             text = text_detalle,\n                             hoverinfo = \"text\",\n                             colors  = brewer.pal(i_num_categories,s_color_pal))\n  p_institu_ingreso <- p_institu_ingreso %>% layout( xaxis = list(  title = \"Institución\"),\n                                                 yaxis = list(  title = \"Ingreso Promedio\", rangemode=\"tozero\"),\n                                                 legend= list( bgcolor= \"#F0F0F0\"),\n                                                 hovermode='closest',\n                                                 margin= list(l=90, r=80, t=40, b=50),\n                                                 plot_bgcolor= \"#fdfdfd\",\n                                                 paper_bgcolor  =\"#fdfdfd\" )\n  return(p_institu_ingreso)\n}\n\n\nselectInputByDataCol <- function(dt_data, s_col, s_input_id, s_label){\n  v_s_opt <- unique(dt_data[[s_col]])\n  v_s_opt <- v_s_opt[ order(v_s_opt)]\n  v_s_opt <- c(\"[Todas]\",v_s_opt)\n  \n  selectInput(inputId = s_input_id, label = s_label,\n              choices = v_s_opt,\n              selected = NULL,\n              multiple = TRUE)\n  \n}\n\nmakeData <- function(dt_data, input){\n  dt_data <- dt_data[ ingreso_promedio > 0  ]\n  \n  # tipo_institucion\n  dt_data <- dt_data[ tolower(tipo_institucion) %in% tolower( stri_trans_general(input$v_s_tipo_inst,\"Latin-ASCII\"))  ]\n  \n  # tipo_gestion\n  dt_data <- dt_data[ tolower(tipo_gestion) %in% tolower( stri_trans_general(input$v_s_tipo_ges,\"Latin-ASCII\"))  ]\n  \n  # institucion\n  v_s_inst <- input$v_s_inst\n  if(!is.null(v_s_inst)){\n    if(! \"[Todas]\" %in% v_s_inst){\n      dt_data <- dt_data[ institucion %in% v_s_inst  ]\n    }\n  }\n  \n  # # carrera\n  # v_s_car <- input$v_s_car\n  # if(!is.null(v_s_car)){\n  #   if(! \"[Todas]\" %in% v_s_car){\n  #     dt_data <- dt_data[ institucion %in% v_s_car  ]\n  #   }\n  # }\n  \n  \n  return(dt_data)\n  \n   \n  \n}",
    "created" : 1491076327203.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3843990554",
    "id" : "B7DD673F",
    "lastKnownWriteTime" : 1491087231,
    "last_content_update" : 1491087231802,
    "path" : "~/Documents/empleo/postulaciones/portfolio/salaryEducationTest/shinyApp/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "marks" : "<:118,68\n>:118,68"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}